<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings
	xmlns="http://java.sun.com/xml/ns/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
	version="2.0">
	<description>OTS ORM mappings</description>
	  <named-query name="OtsUsers.findByUserOtsRoleId">
		<query>SELECT o 
		FROM 
			OtsUsers o	
		WHERE 
			o.otsUserRoleId = :otsUserRoleId
		</query>
	</named-query> 	
	<named-query name="OtsUsers.findByRegistrationTable">
		<query>SELECT r 
		FROM 
			OtsRegistration r,OtsUsers o
		WHERE 
			o.otsUsersId = :otsUsersMappedTo 
		AND	
			r.otsUsersMappedTo = :otsUsersMappedTo
		AND
			r.otsRegistrationStatus = 'New'
		</query>
	</named-query>
	
	<named-query name="OtsProduct.findByPattrenMatching">
		<query>SELECT o 
		FROM 
		OtsProduct o 
		WHERE o.otsProductName LIKE :FirstLetter
		</query>
	</named-query>
	<named-query name="OtsUsers.findByUserOtsbyMappedTo">
		<query>select m.otsUsersId 
		from
			OtsUserMapping m 
		 where 
		  	m.otsMappedTo = :MappedTo
		</query>
	</named-query> 	
	<named-query name="OtsProduct.findByOtsProductIdAndUserId">
		 <query>
		SELECT
			 s
		FROM 
			OtsProductStock s 
		WHERE
			s.otsUsersId = :otsUsersId 	
		AND
			s.otsProductId = :otsProductId	
		</query> 
	</named-query>	
	
	<named-query name="OtsRegistration.matchEmailidPhoneNumber">
		<query>SELECT r 
		FROM 
			OtsRegistration r
		WHERE 
			r.otsRegistrationContactNo = :otsRegistrationContactNo 
		OR
			r.otsRegistrationEmailid = :otsRegistrationEmailid
		</query>
	</named-query> 
	<named-query name="OtsOrder.fetchOtsSoldProducts">
		<query>SELECT o
		FROM 
			OtsOrderProduct o
		WHERE 
			o.otsOrderId = :otsOrderId 
		AND
			o.otsProductId= :otsProductId
		</query>
	</named-query> 	
	<named-query name="OtsOrder.GetOrderListByTime">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			(o.otsDistributorId = :DistributorsId)
		</query>
	</named-query> 	 
	<named-query name="OtsOrder.getOrderIdByDistrubitorId">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			o.otsDistributorId = :otsDistributorId
		AND
			o.otsOrderStatus =:Status
		</query>
	</named-query>
	<named-query name="OtsOrderProduct.GetOrderByDistrubutorIdAndStatus">
		<query>SELECT o 
		FROM 
			OtsOrderProduct o
		WHERE 
			o.otsOrderId = :otsOrderId
		</query>
	</named-query>
	<named-query name="OtsLatLon.getLatLongByUserId">
		<query>SELECT o 
		FROM 
			OtsLatLon o
		WHERE 
			o.otsUsersusersId = :otsUserId 
			AND 
		o.otsLatLonId = (select max(o.otsLatLonId) FROM OtsLatLon o WHERE o.otsUsersusersId = :otsUserId )
		
		</query>
	</named-query>
	<named-query name="OtsProductStock.getQuantityById">
		<query>SELECT o
		FROM 
			OtsProductStock o
		WHERE 
			o.otsUsersId = :DistributorId 
		AND
			o.otsProductId= :ProductId
		</query>
	</named-query>
	
	<named-query name="OtsCustomerOutstanding.findByOtscustomerId">
		<query>SELECT o
		FROM 
			OtsCustomerOutstanding o
		WHERE 
			o.otsCustomerId = :customerId 
		
		</query>
	</named-query>
	<named-query name="OtsProductOrder.fetchDistributorId">
		<query>SELECT p
		FROM 
			OtsOrderProduct p
		WHERE 
			p.otsOrderId = :otsOrderId
		AND
			p.otsProductId = :otsProductId
		</query>
	</named-query>
	<named-query name="OtsOrder.getAssginedOrder">
		<query>SELECT o 
		FROM 
			OtsOrder o 
		WHERE 
			o.otsAssignedId = :otsAssignedId
		AND
			o.otsOrderStatus = :otsOrderStatus
		</query>
	</named-query>
	<named-query name="OtsOrderProduct.findByotsOrderId">
		<query>SELECT p
		FROM 
			OtsOrderProduct p
		WHERE 
			p.otsOrderId = :otsOrderId
		</query>
	</named-query>
	<named-query name="OtsUsers.CheckForRegistration">
		<query>SELECT o 
		FROM 
			OtsUsers o	
		WHERE 
			o.otsUsersEmailid = :otsEmailId
		OR
			o.otsUsersContactNo = :otsPhonenumber
		</query>
	</named-query> 	
		<named-query name="OtsRegistration.CheckForRegistration">
		<query>SELECT o 
		FROM 
			OtsRegistration o	
		WHERE 
			o.otsRegistrationEmailid = :otsEmailId
		OR
			o.otsRegistrationEmailid = :otsPhonenumber
		</query>
	</named-query> 
	<named-query name="OtsOrder.getOrderListForBillID">
		<query>SELECT o 
		FROM 
			OtsOrder o 
		WHERE
			 o.otsBillId = :otsBillId
		</query>
	</named-query>
	<named-query name="OtsOrder.getOrderIdByCustomerId">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			o.otsCustomerId = :otsCustomerId
		AND
			o.otsOrderStatus =:Status
		</query>
	</named-query>
	<named-query name="OtsOrder.GetListOfOrderByDateforCustomer">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			(o.otsCustomerId = :otsCustomerId)
		</query>
	</named-query> 
	<named-query name="OtsOrder.GetListOfOrderByDateforDistrbutor">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			(o.otsDistributorId = :otsDistributorId)
		</query>
	</named-query>	
	
	<named-query name="OTSBill.findBillNumber">
		<query>SELECT o 
		FROM 
			OtsBill o
		WHERE 
			(o.otsBillCreated BETWEEN :fromDate AND :toDate) 
		AND 
			(o.otsCustomerId = :otsCustomerId)
		
		</query>
	</named-query>
	
	<named-query name="OtsCustomerProduct.getCustomerProductDetails">
		<query>SELECT o 
		FROM 
			OtsCustomerProduct o
		WHERE 
			o.otsProductId = :otsProductId
		AND
			o.otsUsersId =:otsUsersId
		AND
			o.otsCustomerProductDefault = :otsCustomerProductDefault
		</query>
	</named-query>
	
	<named-query name="OtsOrder.GetOrderListForDistributorByDateAndStatus">
		<query>SELECT o
		FROM    
			OtsOrder o
		WHERE
			(o.otsOrderDeliveredDt >= :startDate AND  :endDate >=o.otsOrderDeliveredDt) 
		AND
	        otsOrderStatus in ('Generated','close')
	    AND 
	    	otsDistributorId = :DistributorId
		</query>
	</named-query>
	<named-query name="OtsCustomerProduct.getBalanceCan">
		<query>SELECT o 
		FROM 
			OtsCustomerProduct o
		WHERE 
			o.otsUsersId =:otsUsersId
		</query>
	</named-query>
	<named-query name="OtsUserMapping.getDistributorId">
		<query>SELECT o 
		FROM 
			OtsUserMapping o
		WHERE 
			o.otsUsersId =:otsUsersId
		</query>
	</named-query>
	<named-query name="OtsRequestOrder.getSchedulerDetails">
		<query>SELECT o 
		FROM 
			OtsRequestOrder o
		WHERE 
			o.otsDistributorId =:DistributorId
		AND
			o.otsRequestStatus = :status
		AND
			(o.otsScheduleDt BETWEEN :todayDate AND :tomorrow)  
		</query>
	</named-query>
	<named-query name="OtsScheduler.getSchedulerDetailsForCronJob">
		<query>SELECT o 
		FROM 
			OtsScheduler o
		WHERE
		(o.otsSchedulerEtDt >=:today AND :today >= otsSchedulerStDt )	 
		</query>
	</named-query>
	<named-query name="OtsRequestOrder.getSchedulerDetailsForCronJob">
		<query>SELECT o 
		FROM 
			OtsRequestOrder o
		WHERE 
			o.otsSchedulerId =:otsSchedulerId
		AND
			(o.otsNxtScheduleDt BETWEEN :yesterday AND :tomorrow)
		</query>
	</named-query>
</entity-mappings>