<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings
	xmlns="http://java.sun.com/xml/ns/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd"
	version="2.0">
	<description>OTS ORM mappings</description>
	<named-query name="OtsUsers.findByUserOtsRoleId">
		<query>SELECT o 
		FROM 
			OtsUsers o	
		WHERE  	
			o.otsUserRoleId = :otsUserRoleId 
		AND 
			o.otsUsersStatus = 'active'
		</query>
	</named-query> 	
	<named-query name="OtsUsers.findByUserOtsRoleIdAdmin">
		<query>SELECT o 
		FROM 
			OtsUsers o	
		WHERE  	
			o.otsUserRoleId = :otsUserRoleId 
		OR
			o.otsUserRoleId = :adminRole
			 
		</query>
	</named-query> 
	<named-query name="OtsUsers.findByRegistrationTable">
		<query>SELECT r 
		FROM 
			OtsRegistration r,OtsUsers o
		WHERE 
			o.otsUsersId = :otsUsersMappedTo 
		AND	
			r.otsUsersMappedTo = :otsUsersMappedTo
		</query>
	</named-query>
	<named-query name="OtsProduct.findByPattrenMatching">
		<query>SELECT o 
		FROM 
			OtsProduct o 
		WHERE 
			o.otsProductName LIKE :FirstLetter
		AND
			o.otsProductLevelId = :otsProductLevelId
		AND
			o.otsProductStatus = 'ACTIVE'
		</query>
	</named-query>
	<named-query name="OtsUsers.findByPattrenMatchingotsUsersFirstname">
		<query>SELECT o 
		FROM 
			OtsUsers o 
		WHERE
			 o.otsUsersFirstname LIKE :otsUsersFirstname
		AND
			otsUsersId NOT IN (1)
		AND 
			o.otsUsersStatus = 'active'
		</query>
	</named-query>
	<named-query name="OtsUsers.findByPattrenMatchingotsUsersLastname">
		<query>SELECT o 
		FROM 
			OtsUsers o 
		WHERE 
			o.otsUsersLastname LIKE :otsUsersLastname
		AND
			otsUsersId NOT IN (1)
		AND 
			o.otsUsersStatus = 'active'
		</query>
	</named-query>
	<named-query name="OtsUsers.findByPattrenMatchingotsUsersEmailid">
		<query>SELECT o 
		FROM 
			OtsUsers o 
		WHERE 
			o.otsUsersEmailid 
		LIKE 
			:otsUsersEmailid
		AND
			otsUsersId NOT IN (1)
		AND 
			o.otsUsersStatus = 'active'
		</query>
	</named-query>
	<named-query name="OtsUsers.findByUserOtsbyMappedTo">
		<query>select m.otsUsersId 
		from
			OtsUserMapping m 
		 where 
		  	m.otsMappedTo = :MappedTo
		</query>
	</named-query> 	
	<named-query name="OtsProduct.findByOtsProductIdAndUserId">
		 <query>
		SELECT
			 s
		FROM 
			OtsProductStock s 
		WHERE
			s.otsUsersId = :otsUsersId 	
		AND
			s.otsProductId = :otsProductId	
		</query> 
	</named-query>	
	
	<named-query name="OtsRegistration.matchEmailidPhoneNumber">
		<query>SELECT r 
		FROM 
			OtsRegistration r
		WHERE 
			r.otsRegistrationContactNo = :otsRegistrationContactNo 
		OR
			r.otsRegistrationEmailid = :otsRegistrationEmailid
		</query>
	</named-query> 
	<named-query name="OtsOrder.fetchOtsSoldProducts">
		<query>SELECT o
		FROM 
			OtsOrderProduct o
		WHERE 
			o.otsOrderId = :otsOrderId 
		AND
			o.otsProductId= :otsProductId
		</query>
	</named-query> 	
	<named-query name="OtsOrder.GetOrderListByTime">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			(o.otsDistributorId = :DistributorsId)
		</query>
	</named-query> 
	<named-query name="OtsOrder.GetOrderListByTimeAndStatusForDistributor">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			(o.otsDistributorId = :DistributorsId)
		AND
			(o.otsOrderStatus =:status)
		</query>
	</named-query> 	
	<named-query name="OtsOrder.GetOrderListByTimeAndStatusForCustomerId">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			(o.otsCustomerId = :CustomerId)
		AND
			(o.otsOrderStatus =:status)
	
		</query>
	</named-query> 		 	 
	<named-query name="OtsOrder.getOrderIdByDistrubitorId">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			o.otsDistributorId = :otsDistributorId
		AND
			o.otsOrderStatus =:Status
		</query>
	</named-query>
	<named-query name="OtsOrderProduct.GetOrderByDistrubutorIdAndStatus">
		<query>SELECT o 
		FROM 
			OtsOrderProduct o
		WHERE 
			o.otsOrderId = :otsOrderId
		</query>
	</named-query>
	<named-query name="OtsLatLon.getLatLongByUserId">
		<query>SELECT o 
		FROM 
			OtsLatLon o
		WHERE 
			o.otsUsersusersId = :otsUserId 
			AND 
		o.otsLatLonId = (select max(o.otsLatLonId) FROM OtsLatLon o WHERE o.otsUsersusersId = :otsUserId )
		
		</query>
	</named-query>
	<named-query name="OtsProductStock.getQuantityById">
		<query>SELECT o
		FROM 
			OtsProductStock o
		WHERE 
			o.otsUsersId = :DistributorId 
		AND
			o.otsProductId= :ProductId
		</query>
	</named-query>
	
	<named-query name="OtsCustomerOutstanding.findByOtscustomerId">
		<query>SELECT o
		FROM 
			OtsCustomerOutstanding o
		WHERE 
			o.otsCustomerId = :customerId 
		
		</query>
	</named-query>
	<named-query name="OtsProductOrder.fetchDistributorId">
		<query>SELECT p
		FROM 
			OtsOrderProduct p
		WHERE 
			p.otsOrderId = :otsOrderId
		AND
			p.otsProductId = :otsProductId
		</query>
	</named-query>
	<named-query name="OtsOrder.getAssginedOrder">
		<query>SELECT o 
		FROM 
			OtsOrder o 
		WHERE 
			o.otsAssignedId = :otsAssignedId
		AND
			o.otsOrderStatus = :otsOrderStatus
		</query>
	</named-query>
	<named-query name="OtsOrderProduct.findByotsOrderId">
		<query>SELECT p
		FROM 
			OtsOrderProduct p
		WHERE 
			p.otsOrderId = :otsOrderId
		</query>
	</named-query>
	<named-query name="OtsUsers.CheckForRegistration">
		<query>SELECT o 
		FROM 
			OtsUsers o	
		WHERE 
			o.otsUsersEmailid = :otsEmailId
		OR
			o.otsUsersContactNo = :otsPhonenumber
		</query>
	</named-query> 	
		<named-query name="OtsRegistration.CheckForRegistration">
		<query>SELECT o 
		FROM 
			OtsRegistration o	
		WHERE 
			o.otsRegistrationEmailid = :otsEmailId
		OR
			o.otsRegistrationEmailid = :otsPhonenumber
		</query>
	</named-query> 
	<named-query name="OtsOrder.getOrderListForBillID">
		<query>SELECT o 
		FROM 
			OtsOrder o 
		WHERE
			 o.otsBillId = :otsBillId
		</query>
	</named-query>
	<named-query name="OtsOrder.getOrderIdByCustomerId">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			o.otsCustomerId = :otsCustomerId
		AND
			o.otsOrderStatus =:Status
		</query>
	</named-query>
	<named-query name="OtsOrder.GetListOfOrderByDateforCustomer">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			(o.otsCustomerId = :otsCustomerId)
		</query>
	</named-query> 
	<named-query name="OtsOrder.GetListOfOrderByDateforEmployee">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			(o.otsAssignedId = :otsAssignedId)
		</query>
	</named-query> 
	<named-query name="OtsOrder.GetListOfOrderByDateforDistrbutor">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		</query>
	</named-query>	
	
	<named-query name="OTSBill.findBillNumber">
		<query>SELECT o 
		FROM 
			OtsBill o
		WHERE 
			(o.otsBillCreated BETWEEN :fromDate AND :toDate) 
		AND 
			(o.otsCustomerId = :otsCustomerId)
		
		</query>
	</named-query>
	
	<named-query name="OtsCustomerProduct.getCustomerProductDetails">
		<query>SELECT o 
		FROM 
			OtsCustomerProduct o
		WHERE 
			o.otsProductId = :otsProductId
		AND
			o.otsUsersId =:otsUsersId
		AND
			o.otsCustomerProductDefault = :otsCustomerProductDefault
		</query>
	</named-query>
	
	<named-query name="OtsOrder.GetOrderListForDistributorByDateAndStatus">
		<query>SELECT o
		FROM    
			OtsOrder o
		WHERE
			(o.otsOrderDeliveredDt >= :startDate AND  :endDate >=o.otsOrderDeliveredDt) 
		AND
	        otsOrderStatus in ('Generated','close')
	    AND 
	    	otsDistributorId = :DistributorId
		</query>
	</named-query>
	<named-query name="OtsOrder.GetOrderListForCustomerByDateAndStatus">
		<query>SELECT o
		FROM    
			OtsOrder o
		WHERE
			(o.otsOrderDeliveredDt >= :startDate AND  :endDate >=o.otsOrderDeliveredDt) 
		AND
	        otsOrderStatus in ('Generated','close')
	    AND 
	    	otsCustomerId = :customerId
		</query>
	</named-query>
	<named-query name="OtsCustomerProduct.getBalanceCan">
		<query>SELECT o 
		FROM 
			OtsCustomerProduct o
		WHERE 
			o.otsUsersId =:otsUsersId
		</query>
	</named-query>
	<named-query name="OtsUserMapping.getDistributorId">
		<query>SELECT o 
		FROM 
			OtsUserMapping o
		WHERE 
			o.otsUsersId =:otsUsersId
		</query>
	</named-query>
	<named-query name="OtsRequestOrder.getSchedulerDetails">
		<query>SELECT o 
		FROM 
			OtsRequestOrder o
		WHERE 
			o.otsDistributorId =:DistributorId
		AND
			o.otsRequestStatus = :status
		AND
			(o.otsScheduleDt BETWEEN :todayDate AND :tomorrow)  
		</query>
	</named-query>
	<named-query name="OtsScheduler.getSchedulerDetailsForCronJob">
		<query>SELECT o 
		FROM 
			OtsScheduler o
		WHERE
		(o.otsSchedulerEtDt >=:today AND :today >= otsSchedulerStDt )	 
		</query>
	</named-query>
	<named-query name="OtsRequestOrder.getSchedulerDetailsForCronJob">
		<query>SELECT o 
		FROM 
			OtsRequestOrder o
		WHERE 
			o.otsSchedulerId =:otsSchedulerId
		AND
			(o.otsNxtScheduleDt BETWEEN :yesterday AND :tomorrow)
		</query>
	</named-query><named-query name="OTSBill.findBillForDistributor">
		<query>SELECT o 
		FROM 
			OtsBill o
		WHERE 
			(o.otsBillCreated BETWEEN :fromDate AND :toDate) 		
		</query>
	</named-query>    
	<named-query name="OtsOrder.GetListOfOrderByDateforCustomerByStatus">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			(o.otsCustomerId = :otsCustomerId)
		AND
			o.otsOrderStatus = :otsOrderStatus
		</query>
	</named-query>
	<named-query name="OtsOrder.GetListOfOrderByDateforDistrbutorByStatus">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			o.otsOrderStatus = :otsOrderStatus
		</query>
	</named-query>	
	<named-query name="OtsOrder.GetListOfOrderByDateforEmployeeByStatus">
		<query>SELECT o 
		FROM 
			OtsOrder o
		WHERE 
			(o.otsOrderDt BETWEEN :FromDate AND :ToDate) 
		AND
			(o.otsAssignedId = :otsAssignedId)
		AND
			o.otsOrderStatus = :otsOrderStatus
		</query>
	</named-query> 
	<named-query name="OtsCustomerProduct.getCustomerProductDetailsByUserId">
		<query>SELECT o 
		FROM 
			OtsCustomerProduct o
		WHERE
			o.otsUsersId =:otsUsersId
		</query>
	</named-query>
	<named-query name="OtsProductStock.DistributorId">
		<query>SELECT o
		FROM 
			OtsProductStock o
		WHERE 
			o.otsUsersId = :DistributorId
		</query>
	</named-query>
	<named-query name="OtsProduct.findByProductDetailsStock">
		<query>SELECT o
		FROM 
			OtsProduct o,OtsProductStock s
		WHERE 
			s.otsUsersId = :DistributorId
		</query>
	</named-query>
	<named-query name="OtsUsers.findByOtsUsersIdAndRoleId">
		<query>SELECT o 
		FROM 
			OtsUsers o	
		WHERE  	
			o.otsUserRoleId = :RoleId
		And
			o.otsUsersId = :otsUsersId
		</query>
	</named-query>
	<named-query name="OtsSubscriptionOrderHistory.findSubscriptionByOtsUsersId">
		<query>SELECT o 
		FROM 
			OtsSubscriptionOrderHistory o	
		WHERE  	
			o.otsUsersId = :otsUsersId
		</query>
	</named-query>
	<named-query name="OtsSubscriptionOrderroledetails.findSubscriptionDetails">
		<query>SELECT o 
		FROM 
			OtsSubscriptionOrderroledetails o	
		WHERE  	
			o.otsSubscriptionOrderHistoryId = :historyId
		</query>
	</named-query>
	<named-query name="OtsScheduler.getSchedularByDate">
		<query>SELECT o 
		FROM 
			OtsScheduler o
		WHERE
			o.otsDistributorId =:DistributorId
		AND
		(o.otsSchedulerEtDt >=:Date AND :Date >= otsSchedulerStDt )	 
		</query>
	</named-query>
	<named-query name="OtsSubscriptionOrder.getCurrentSubscription">
		<query>SELECT o 
		FROM 
			OtsSubscriptionOrder o
		WHERE
			o.otsUsersId =:otsUsersId
		</query>
	</named-query>
	<named-query name="OtsSubscriptionRoleMapping.getCurrentTotalUser">
		<query>SELECT o 
		FROM 
			OtsSubscriptionRoleMapping o
		WHERE
			o.otsSubscriptionOrderId =:otsSubscriptionOrderId
		</query>
	</named-query>
	<named-query name="OtsProduct.otsProductLevelId">
		<query>SELECT o 
		FROM 
			OtsProduct o
		WHERE
			o.otsProductLevelId =:otsProductLevelId
		</query>
	</named-query>
	<named-query name="getProductByMappingotsProductCategoryId.otsProductCategoryId">
		<query>SELECT o 
		FROM 
			OtsProductCategoryMapping o
		WHERE
			o.otsProductCategoryId =:otsProductCategoryId
		</query>
	</named-query>
	<named-query name="OtsCustomerProduct.getListOfCatAndSubCat">
		<query>SELECT o 
		FROM 
			OtsCustomerProduct o
		WHERE 
			o.otsUsersId =:distributorId
		AND
			o.otsProductId = :otsProductId
		</query>
	</named-query>
	<named-query name="OtsProduct.findAllProduct">
		<query>SELECT o 
			FROM 
				OtsProduct o 
			WHERE 
				o.otsProductLevelId = :otsProductLevelId
			AND 
				o.otsProductStatus = :status
		</query>
	</named-query>
	
	<!-- shreekant.rathod -->
	<named-query name="OtsRequestProduct.getNewRequestProduct">
		<query>SELECT o 
		FROM 
			OtsRequestProduct o	
		WHERE  	
			o.otsProductId = :productId 
		AND
			o.otsRequestProductStatus = :status 
		</query>
	</named-query> 
	<named-query name="OtsRequestProduct.getDonationListBystatus">
		<query>SELECT o 
		FROM 
			OtsRequestProduct o	
		WHERE  	
			o.otsRequestProductStatus = :status 
		</query>
	</named-query>
	<named-query name="OtsRequestProduct.getDonationListBystatusAndProduct">
		<query>SELECT o 
		FROM 
			OtsRequestProduct o	
		WHERE  	
			o.otsRequestProductStatus = :status 
		AND
			o.otsProductId = :productId
		</query>
	</named-query>
	<named-query name="OtsDonation.getDonationReportByDate">
		<query>SELECT o 
		FROM 
			OtsDonationRequestMapping o	
		WHERE  	
			(o.otsDonationDate >= :startDate AND  :endDate >=o.otsDonationDate)
		</query>
	</named-query>  
	<named-query name="OtsOrderrequestMapping.findByRequestProduct">
		<query>SELECT o 
		FROM 
			OtsOrderrequestMapping o	
		WHERE  	
			o.otsRequestProductId = :OtsRequestProductId
		</query>
	</named-query>
	<named-query name="OtsDonation.getRequestByDonationId">
		<query>SELECT o 
		FROM 
			OtsDonationRequestMapping o	
		WHERE  	
			o.otsDonationId = :otsDonationId
		</query>
	</named-query>
	<named-query name="OtsDonation.getRequestByDonationIdAndStatus">
		<query>SELECT o 
		FROM 
			OtsDonation o	
		WHERE  	
			o.otsDonationStatus = :otsDonationStatus
		AND
			o.otsAssgineId = :otsAssgineId
		</query>
	</named-query>  
	<named-query name="OtsProductWishlist.getWhishListByCustomerId">
		<query>SELECT o 
		FROM 
			OtsProductWishlist o	
		WHERE  	
			o.otsCustomerId = :otsCustomerId
			
		</query>
	</named-query>  
	<named-query name="OtsProductWishlist.getWhishListByCustomerIdAndProductId">
		<query>SELECT o 
		FROM 
			OtsProductWishlist o	
		WHERE  	
			o.otsCustomerId = :otsCustomerId
			AND
			o.otsProductId = :otsProductId
		</query>
	</named-query>  
	<named-query name="OtsCart.getCartListByCustomerIdAndProductId">
		<query>SELECT o 
		FROM 
			OtsCart o	
		WHERE  	
			o.otsCustomerId = :otsCustomerId
			AND
			o.otsProductId = :otsProductId
		</query>
	</named-query>  
	<named-query name="OtsCart.getCartListByCustomerId">
		<query>SELECT o 
		FROM 
			OtsCart o	
		WHERE  	
			o.otsCustomerId = :otsCustomerId
			
		</query>
	</named-query>  
	<named-query name="OtsCart.getCartListByCustomerIdProductIdAndQuantity">
		<query>SELECT o 
		FROM 
			OtsCart o	
		WHERE  	
			o.otsCustomerId = :otsCustomerId
			AND
			o.otsProductId = :otsProductId
			AND
			o.otsCartQty = :otsCartQty
		</query>
	</named-query>  
	
	<!-- Shreekant Rathod 1-2-2021 -->
	<named-query name="OtsRatingReview.getReviewAndRatingByProductIdAndStatus">
		<query>SELECT o 
		FROM 
			OtsRatingReview o	
		WHERE  	
			o.otsProductId = :otsProductId
		</query>
	</named-query>
	<named-query name="OtsRatingReview.getReviewAndRatingByCustomerIdAndStatus">
		<query>SELECT o 
		FROM 
			OtsRatingReview o	
		WHERE  	
			o.otsCustomerId = :otsCustomerId
		</query>
	</named-query>  
	
	
	<named-query name="OtsRatingReview.getReviewAndRatingByProductId">
		<query>SELECT o 
		FROM 
			OtsRatingReview o	
		WHERE  	
			o.otsProductId = :otsProductId
			
		</query>
	</named-query>
	<named-query name="OtsRatingReview.getReviewAndRatingByCustomerId">
		<query>SELECT o 
		FROM 
			OtsRatingReview o	
		WHERE  	
			o.otsCustomerId = :otsCustomerId
			
		</query>
	</named-query>  
	<named-query name="OtsRatingReview.getReviewAndRatingByReviewAndRatingId">
		<query>SELECT o 
		FROM 
			OtsRatingReview o	
		WHERE  	
			o.otsRatingReviewId = :otsRatingReviewId
		</query>
	</named-query>  
	<named-query name="OtsNotifyCustomer.getNotifyProductDetails">
		<query>SELECT o 
		FROM 
			OtsNotifyCustomer o	
		WHERE  	
			o.otsUsersId = :otsUsersId
		AND
			o.otsProductId = :otsProductId
		</query>
	</named-query>  
	<named-query name="OtsUsers.GetDetailsOnLogin">
		<query>SELECT o 
		FROM 
			OtsUsers o	
		WHERE  	
			o.otsUsersContactNo = :loginId
		OR
			o.otsusersgoogleId =  :loginId
		OR 
			o.otsusersfacebookId =:loginId
		</query>
	</named-query>  
</entity-mappings>